plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

apply plugin: 'kotlin-kapt'

kapt {
    correctErrorTypes = true
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.jsn.a20k"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14"
            }
        }
        ndk {
            abiFilters 'armeabi-v7a'
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }


    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            // let gradle pack the shared library into the apk
            //jniLibs.srcDirs = ['src/main/cpp/jni']
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
            dataBinding  true
    }
}

dependencies {

    implementation 'com.huawei.hms:videokit-player:1.0.5.300'

    implementation 'com.huawei.hms:videokit-player-fallback:1.0.5.300'

    implementation 'com.huawei.hms:dynamic-loader-fallback:1.0.17.300'


    implementation 'com.huawei.hms:scanplus:1.3.2.300'

    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
    testImplementation 'org.junit.jupiter:junit-jupiter'

    def room_version = "2.4.0-alpha01"

        implementation("androidx.room:room-runtime:$room_version")
        annotationProcessor "androidx.room:room-compiler:$room_version"

        // To use Kotlin annotation processing tool (kapt)
        kapt("androidx.room:room-compiler:$room_version")
        // To use Kotlin Symbolic Processing (KSP)
        //ksp("androidx.room:room-compiler:$room_version")

        // optional - Kotlin Extensions and Coroutines support for Room
        implementation("androidx.room:room-ktx:$room_version")

        // optional - RxJava2 support for Room
        //implementation "androidx.room:room-rxjava2:$room_version"

        // optional - RxJava3 support for Room
        //implementation "androidx.room:room-rxjava3:$room_version"

        // optional - Guava support for Room, including Optional and ListenableFuture
        //implementation "androidx.room:room-guava:$room_version"

        // optional - Test helpers
        testImplementation("androidx.room:room-testing:$room_version")



    def epoxyVersion='4.6.0'


    implementation "com.airbnb.android:epoxy:$epoxyVersion"
    implementation "com.airbnb.android:epoxy-databinding:$epoxyVersion"
    // Add the annotation processor if you are using Epoxy's annotations (recommended)
    kapt "com.airbnb.android:epoxy-processor:$epoxyVersion"




    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}